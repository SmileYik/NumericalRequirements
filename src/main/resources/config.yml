# 语言设置
language: zh_CN

# 玩家数据在哪些世界里才允许流逝
available-worlds:
  - "World"

# 插件使用统计
bStats: true

# 状态指令
status:
  # 使用状态指令所返回的消息，允许使用元素格式化占位符
  # {0}: 玩家名
  # {1}: 玩家身上所有的效果包列表
  msg:
    - "{0}:"
    - "    &b&l口渴值&f：${format:process-bar;ThirstElement} &b${format:percent;ThirstElement}%"
    - "    效果：{1}"
  # 没有权限的玩家在使用查询状态指令时，查询信息缓存多久，单位毫秒
  cache: 10000


#######################################################
#
#                    数据源配置
#
######################################################
# 数据源的设置格式大致如下
#datasource:
#  # 数据源名称, 之后修改需要标注数据源的配置时, 可以将此字符串作为参数填上去, 在这里是 sqlite
#  sqlite:
#    # 数据库链接, 必填
#    jdbc-url: jdbc:sqlite:${data_folder}/sqlite.db
#    # 数据库驱动, 可选, 如果不想手动指定驱动, 则可以直接删除, 就像下面 h2 一样
#    driver: org.sqlite.JDBC
#    # 其他配置项, 配置参考 https://github.com/brettwooldridge/HikariCP
#    properties:
#      cachePrepStmts: true
#  # 设置一个名为 h2 的数据源, 根据 jdbc-url 自动获取驱动
#  h2:
#    jdbc-url: jdbc:h2:${data_folder}/h2
#    properties:
#      cachePrepStmts: true
datasource: {}

# 物品相关设置
item:
  # 使用哪个物品管理器
  # 现有的物品管理器有以下两种:
  #   org.eu.smileyik.numericalrequirements.core.item.FileItemKeeper
  #   org.eu.smileyik.numericalrequirements.core.item.relational.RelationalItemKeeper
  # FileItemKeeper: 该管理器将使用 Yaml 配置文件以及 Json 配置文件管理物品,有效的物品文件为 items.yml 以及 items.json 两个.
  #                 在存储新的物品文件时, 在默认情况下将会优先存储至 items.json 中. 此外, 该物品管理器具有简易的物品缓存以加快
  #                 读取物品的速度. 该物品管理器不需要额外的配置项
  # RelationalItemKeeper: 该管理器使用关系型数据库对物品进行管理, 相比于 FileItemKeeper, 速度可能会更快, 并且同样拥有较为简易
  #                       的物品缓存. 该物品管理器需要额外进行配置, 以设置数据源.
  type: org.eu.smileyik.numericalrequirements.core.item.FileItemKeeper
  # 如果使用 RelationalItemKeeper 作为物品管理器则需要为其设置数据源, 数据源在根节点的 datasource 字段下设置.
  # 如果你使用 FileItemKeeper 作为物品管理器则可以忽略该配置.
  datasource: sqlite
  # 是否启用物品同步，依赖于NBT
  sync: true
  # 物品序列化设置
  serialization:
    # 物品 NBT 信息序列化设置
    nbt:
      # 不序列化哪些 NBT 的键值
      ignore-keys:
        - "CustomModelData"
        - "display"
        - "HideFlags"

# 效果设置
effect:
  # 设定效果捆绑包
  bundle:
    # 效果捆绑包ID，同时作为效果名字的存在
    "example-1":
      type: "增益"
      # 效果类型ID，目前所支持的ID如下所示
      # EffectBundle(效果捆绑包), PotionEffect(原版药水效果),
      # ThirstElement-NaturalDepletionEffect(操纵口渴元素自然消减值效果)

      # 增加药水效果
      PotionEffect:
        # 这里的 a 是任意字符，PotionEffect 键下有多少个就代表增加多少个药水效果
        a:
          # 效果类型：参照BUKKIT API中PotionEffectType枚举类的值，需要注意大小写
          potion-type: "SPEED"
          # 效果强度，0为游戏中的1级强度
          amplifier: 0
        # 和上面的 ‘a’ 一样， ‘b’ 是随便添上去的
        b:
          potion-type: "JUMP"
          amplifier: 1

      # 聊天消息效果，仅仅只会在该效果包注册给玩家后瞬间激活并且立即销毁，
      # 也就是说仅仅只在效果包的持续时间内作用一次
      ChatMessage:
        # ‘a’是随便打的，和上面一样有多少加多少
        a:
          # 消息文本，支持要素格式化占位符
          message: "I send message to you"
        b:
          message: "口渴值： ${format:process-bar;ThirstElement}"

      # ActionBar 消息效果，向玩家发送 ActionBar 消息， 与 ChatMessage 类似，作用后立即销毁
      ActionBar:
        # 一样的任意字符
        a:
          # 消息文本，支持要素格式化占位符
          message: "Look at me!"

      # Title 消息效果， 向玩家发送Title, 与 ChatMessage 类似，作用后立即销毁
      TitleMessage:
        # 一样的
        a:
          # 主标题文本，支持要素格式化占位符，若不需要主标题则可删除这行
          main: "Main Title"
          # 副标题文本，若不需要副标题则可删除这行，主标题和副标题至少得有一个
          sub: "Sub Title"
          # 淡入时间，单位游戏刻
          fade-in: 10
          # 停留时间，单位游戏刻
          stay: 30
          # 淡出时间，单位游戏刻
          fade-out: 10

      # 与要素有关的效果： 该效果为影响口渴值的自然流失值
      ThirstElement-NaturalDepletionEffect:
        # 一样的
        a:
          # 减少0.5点/秒的元素流失速度
          # 若元素的原始流失速度为1点/秒，则作用该效果后，流失速度变为 (1 + (-0.5)) 点/秒
          data: -0.5

    # 该示例效果与 example-1 的效果一模一样
    "example-2":
      type: "捆绑捆绑包"
      # 捆绑包效果
      EffectBundle:
        # 任意字符作为键值，键值下面为【效果类型ID】对应的效果所需要的参数
        a:
          # 捆绑包ID
          bundle-id: example-1

######################
# 元素格式化器配置
######################

# 目前所有的元素格式化器有：
#   process-bar: 显示进度条
#   simple: 显示数值，类似于: 当前值/元素上界
#   percent: 显示当前值与上界之间的百分比
# 格式化占位符： ${format:<格式化程序ID>;<要素ID>}
# 例如显示口渴值进度条则为: ${format:process-bar;ThirstElement}
formatter:
  # process-bar: 进度条设置
  process-bar:
    # 填满进度条时的字符
    fill: '&2o'
    # 进度条为空时的字符
    empty: "&4x"
    # 进度条长度
    length: 16

######################################
#
#          玩家设置
#
######################################
player:
  autosave: 600000 # 自动保存玩家数据，单位毫秒
  schedule:     # 玩家数据更新线程
    delay: 40   # 延迟启动时间，单位毫秒
    period: 40  # 更新间隔时间，单位毫秒
  #########################################
  ##           线程池设定
  # 线程池中线程运行方式由 queue 选项决定
  # java.util.concurrent.LinkedBlockingQueue：
  #     当核心线程数量已满且都繁忙时，
  #     将后来任务加入到队列末尾等待核心线程空闲
  # java.util.concurrent.SynchronousQueue:
  #     当核心线程都繁忙时，创建新的线程运行提交的任务，
  #     若总线程数量超过最大线程数量则丢弃任务
  thread-pool:
    update:              # 玩家数据更新线程池
      core-pool-size: 8  # 核心线程数量
      max-pool-size: 8   # 最大线程数量
      keep-alive-time: 0 # 核心线程外的线程在空闲状态下保持存活的时间，单位毫秒
      queue: java.util.concurrent.LinkedBlockingQueue # 线程池所用队列



#######################################################
#
#                    自定义方块设置
#
######################################################
custom-block:
  # 是否启用自定义方块服务
  enable: true
  # 自定义方块服务类型.
  # 目前可选的自定义方块服务类型有以下几种:
  #   org.eu.smileyik.numericalrequirements.core.customblock.RealCustomBlockService
  #
  # RealCustomBlockService: 该类型的自定义方块服务将会在服务器中生成真实的方块以及真实的实体来达到自定义方块的效果.
  type: org.eu.smileyik.numericalrequirements.core.customblock.RealCustomBlockService
