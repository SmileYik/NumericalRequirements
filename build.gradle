plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
}

group = 'org.eu.smileyik'


def totalFix = 0

pluginFixCount().forEach((k, v) -> {
    totalFix += v
})

version = "1.1.${totalFix}"

static def pluginFixCount() {
    [
        core: 4,
        thirst: 0,
        luaEffect: 0,
        multiBlockCraft: 0
    ]
}

def pluginVersions() {
    [
        plugin: version,
        thirst: "1.0.${pluginFixCount()['thirst']}",
        luaEffect: "1.0.${pluginFixCount()['luaEffect']}",
        "multiBlockCraft": "1.0.${pluginFixCount()['luaEffect']}"
    ]
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.1'

    implementation project(":Commons:ReflectTool")
    implementation project(":Core")
    implementation project(":Extensions:MultiBlockCraft")
    implementation project(":Extensions:Thirst")
    implementation project(":Extensions:LuaEffect")
    implementation project(":Test")
}

def changeVersion() {
    file("${buildDir}/resources/main").eachFile {
        if (!it.name.endsWith("yml")) return
        def text = it.readLines().join("\n")
        for (final def entry in pluginVersions()) {
            text = text.replace(String.format("\${%sVersion}", entry.key), entry.value)
        }
        it.write(text)
    }
}

shadowJar {
    dependencies {
        exclude(dependency("org.spigotmc:spigot-api:"))
        exclude(dependency("org.spigotmc:spigot:"))
        exclude(dependency("commons-lang:commons-lang:"))
        exclude(dependency("com.google.guava:guava:"))
        exclude(dependency("com.google.code.gson:gson:"))
        exclude(dependency("net.md-5:bungeecord-chat:"))
        exclude(dependency("com.google.code.gson:gson:"))
        exclude(dependency(":junit*:"))
        exclude(dependency(":LuaInMinecraftBukkit:"))
        exclude(dependency("org.jetbrains:annotations"))
        exclude(dependency("org.luaj::"))
    }

    doFirst {
        changeVersion()
    }
}

// 删除plugins文件夹中以前构建的文件.
task deleteOldBuilds(type: Delete) {
    for (final def f in file("${projectDir}/server/plugins/").listFiles()) {
        if (f.isFile() && f.getName().startsWith("${archivesBaseName}")) {
            printf("Remove old build: %s\n", f.toString())
            delete f
        }
    }
}

// 复制当前版本到plugins文件夹中z
task copyTask(type: Copy) {
    dependsOn(shadowJar)
    dependsOn(deleteOldBuilds)
    from "${buildDir}/libs/${archivesBaseName}-${version}-all.jar"
    into "${projectDir}/server/plugins/"

    doLast {
        for (final def d in file("${projectDir}/servers/").listFiles()) {
            if (d.isFile()) continue
            def dir = file("${d}/plugins")
            if (!dir.exists()) {
                println "ln -s ${projectDir}/server/plugins/ ${dir}"
                def proc = "ln -s ${projectDir}/server/plugins/ ${d}".execute()
                proc.waitForProcessOutput(System.out, System.err)
            }
        }
    }
}
