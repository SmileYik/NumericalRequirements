import java.util.jar.JarFile
import java.util.jar.JarOutputStream
import java.util.zip.ZipEntry

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
}

group = 'org.eu.smileyik'


def totalFix = 0

pluginFixCount().forEach((k, v) -> {
    totalFix += v
})

version = "1.0.${totalFix}"

static def pluginFixCount() {
    [
        core: 1,
        thirst: 0,
        luaEffect: 0,
        multiBlockCraft: 0
    ]
}

def pluginVersions() {
    [
        plugin: version,
        thirst: "1.0.${pluginFixCount()['thirst']}",
        luaEffect: "1.0.${pluginFixCount()['luaEffect']}",
        "multiBlockCraft": "1.0.${pluginFixCount()['luaEffect']}"
    ]
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.1'

    implementation project(":Commons:ReflectTool")
    implementation project(":Core")
    implementation project(":MultiBlockCraft")
    implementation project(":Thirst")
    implementation project(":Test")
}

shadowJar {
    dependencies {
        exclude(dependency("org.spigotmc:spigot-api:"))
        exclude(dependency("org.spigotmc:spigot:"))
        exclude(dependency("commons-lang:commons-lang:"))
        exclude(dependency("com.google.guava:guava:"))
        exclude(dependency("com.google.code.gson:gson:"))
        exclude(dependency("net.md-5:bungeecord-chat:"))
        exclude(dependency("com.google.code.gson:gson:"))

        exclude(dependency(":junit*:"))
        exclude(dependency(":LuaInMinecraftBukkit:"))
        exclude(dependency {
            it.moduleGroup.startsWith("org") && !it.moduleGroup.startsWith("org.eu") ||
                    it.moduleGroup.startsWith("net.m") ||
                    it.moduleGroup.startsWith("com.google")
        })
    }

    relocate('net.bytebuddy', "org.eu.smileyik.numericalrequirements")

    doLast {
        delete "${buildDir}/libs/${archivesBaseName}-${version}-final.jar"

        JarFile inFile = new JarFile(new File("${buildDir}/libs/${archivesBaseName}-${version}-all.jar"))
        JarOutputStream jos = new JarOutputStream(new FileOutputStream(new File("${buildDir}/libs/${archivesBaseName}-${version}-final.jar")))
        def entries = inFile.entries()
        while (entries.hasMoreElements()) {
            def element = entries.nextElement()
            jos.putNextEntry(new ZipEntry(element.getName()))
            def stream = inFile.getInputStream(element)
            if (element.getName().toLowerCase().endsWith(".yml")) {
                def lines = stream.newReader().readLines()
                for (int i = 0; i < lines.size(); ++i) {
                    def line = lines.get(i)
                    for (final def entry in pluginVersions()) {
                        line = line.replace(String.format("\${%sVersion}", entry.key), entry.value)
                    }
                    lines.set(i, line)
                }
                def content = lines.join("\n").getBytes()
                jos.write(content, 0, content.length)
            } else {
                byte[] bytes = new byte[8196]
                int len = 0
                while ((len = stream.read(bytes)) != -1) {
                    jos.write(bytes, 0, len)
                }
            }
            jos.flush()
            stream.close()
        }
        jos.close()
        inFile.close()
    }
}

// 删除plugins文件夹中以前构建的文件.
task deleteOldBuilds(type: Delete) {
    for (final def f in file("${projectDir}/server/plugins/").listFiles()) {
        if (f.isFile() && f.getName().startsWith("${archivesBaseName}")) {
            printf("Remove old build: %s\n", f.toString())
            delete f
        }
    }
}

// 复制当前版本到plugins文件夹中z
task copyTask(type: Copy) {
    dependsOn(shadowJar)
    dependsOn(deleteOldBuilds)
    from "${buildDir}/libs/${archivesBaseName}-${version}-final.jar"
    into "${projectDir}/server/plugins/"

    doLast {
        for (final def d in file("${projectDir}/servers/").listFiles()) {
            if (d.isFile()) continue
            def dir = file("${d}/plugins")
            if (!dir.exists()) {
                println "ln -s ${projectDir}/server/plugins/ ${dir}"
                def proc = "ln -s ${projectDir}/server/plugins/ ${d}".execute()
                proc.waitForProcessOutput(System.out, System.err)
            }
        }
    }
}
